Let A[1..n] be an array of n distinct elements.  If i < j and A[i] > A[j], then
the pair (i, j) is called an inversion of A.

a) List the five inversions of the array 〈2, 3, 8, 6, 1〉

(2, 1) (3, 1) (8, 6) (8, 1) (6, 1)

b) What array with elements from the set 〈1, 2, ..., n〉 has the most
inversion?

The array 〈n..1〉 has the most inversions.  It has (n * (n - 1)) / 2
inversions.

c) What is the relationship between the running time of insertion sort and the
number of inversions in the input array?  Justify your answer.

The running time of the inner loop is proportional to the number of inversions
in the set and therefore the running time of insertion sort (ignoring
individual instruction time) can be expressed as (n * numberOfInversions).
This is because the insertion sort's inner swapping loop works by swapping
inversions.

d) Give an algorithm that determines the number of inversions in any
permutation on n elements in Θ(n lg n) worst-case time. (Hint: Modify merge
sort.)

MERGE-SORT-COUNT-INVERSIONS(A, p, r)
    count = 0
    if p < r
        q = floor((p + r) / 2)
        count = count + MERGE-SORT-COUNT-INVERSIONS(A, p, q)
        count = count + MERGE-SORT-COUNT-INVERSIONS(A, q+1, r)
        count = count + MERGE-COUNT-INVERSIONS(A, p, q, r)
    return count

MERGE-COUNT-INVERSIONS(A, p, q, r)
    n1 = q - p + 1
    n2 = r - q
    let L[1..n1] and R[1..n2] be new arrays
    for i = 1 to n1
        L[i] = A[p + i - 1]
    for j = 1 to n2
        R[j] = A[q + j]
    i = 1
    j = 1
    count = 0
    for k = p to r
        if i <= L.length and j <= R.length
            if L[i] <= R[j]
                A[k] = L[i]
                i = i + 1
            else
                count = count + n1 - i
                A[k] = R[j]
                j = j + 1
        else
            if i <= L.length
                A[k] = L[i]
                i = i + 1
            else
                A[k] = R[j]
                j = j + 1
    return count
